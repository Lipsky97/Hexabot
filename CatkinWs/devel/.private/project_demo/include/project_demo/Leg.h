// Generated by gencpp from file project_demo/Leg.msg
// DO NOT EDIT!


#ifndef PROJECT_DEMO_MESSAGE_LEG_H
#define PROJECT_DEMO_MESSAGE_LEG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project_demo
{
template <class ContainerAllocator>
struct Leg_
{
  typedef Leg_<ContainerAllocator> Type;

  Leg_()
    : tigh(0.0)
    , knee(0.0)
    , foot(0.0)  {
    }
  Leg_(const ContainerAllocator& _alloc)
    : tigh(0.0)
    , knee(0.0)
    , foot(0.0)  {
  (void)_alloc;
    }



   typedef float _tigh_type;
  _tigh_type tigh;

   typedef float _knee_type;
  _knee_type knee;

   typedef float _foot_type;
  _foot_type foot;





  typedef boost::shared_ptr< ::project_demo::Leg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_demo::Leg_<ContainerAllocator> const> ConstPtr;

}; // struct Leg_

typedef ::project_demo::Leg_<std::allocator<void> > Leg;

typedef boost::shared_ptr< ::project_demo::Leg > LegPtr;
typedef boost::shared_ptr< ::project_demo::Leg const> LegConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_demo::Leg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_demo::Leg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project_demo::Leg_<ContainerAllocator1> & lhs, const ::project_demo::Leg_<ContainerAllocator2> & rhs)
{
  return lhs.tigh == rhs.tigh &&
    lhs.knee == rhs.knee &&
    lhs.foot == rhs.foot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project_demo::Leg_<ContainerAllocator1> & lhs, const ::project_demo::Leg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::project_demo::Leg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_demo::Leg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_demo::Leg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_demo::Leg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_demo::Leg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_demo::Leg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_demo::Leg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5da4b1c2eb62b548b44603075da2f338";
  }

  static const char* value(const ::project_demo::Leg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5da4b1c2eb62b548ULL;
  static const uint64_t static_value2 = 0xb44603075da2f338ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_demo::Leg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_demo/Leg";
  }

  static const char* value(const ::project_demo::Leg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_demo::Leg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#tigh\n"
"float32 tigh\n"
"#knee\n"
"float32 knee\n"
"#foot\n"
"float32 foot\n"
;
  }

  static const char* value(const ::project_demo::Leg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_demo::Leg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tigh);
      stream.next(m.knee);
      stream.next(m.foot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Leg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_demo::Leg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_demo::Leg_<ContainerAllocator>& v)
  {
    s << indent << "tigh: ";
    Printer<float>::stream(s, indent + "  ", v.tigh);
    s << indent << "knee: ";
    Printer<float>::stream(s, indent + "  ", v.knee);
    s << indent << "foot: ";
    Printer<float>::stream(s, indent + "  ", v.foot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_DEMO_MESSAGE_LEG_H
